class Solution {

    public int minDays(int[][] grid) {
        
       if (island(grid) != 1) return 0;

        for (int i = 0; i < grid.length; i++) {

            for (int j = 0; j < grid[0].length; j++) {

                if (grid[i][j] == 1) {

                    grid[i][j] = 0;

                    if (island(grid) != 1) return 1;

                    grid[i][j] = 1;
                }
            }
        }

        return 2;
    }

    public int island(int[][] g) {

        boolean[][] b = new boolean[g.length][g[0].length];

        int l = 0;

        for (int i = 0; i < g.length; i++) {

            for (int j = 0; j < g[0].length; j++) {

                if (g[i][j] == 1 && !b[i][j]) {

                    l++; dfs(g, i, j, b);
                }
            }
        }

        return l;
    }

    public void dfs(int[][] g, int r, int c, boolean[][] b) {

        b[r][c] = true;

        int[][] d = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for (int[] p : d) {

            int nr = r + p[0], nc = c + p[1];

            if (nr >= 0 && nr < g.length && nc >= 0 && nc < g[0].length && g[nr][nc] == 1 && !b[nr][nc]) dfs(g, nr, nc, b);
        } 
    }
}
