class Solution {

    int[] p; int[] r; int c;

    public int regionsBySlashes(String[] grid) {

        int rows = grid.length, d = rows + 1;

        p = new int[d * d]; r = new int[d * d];

        for (int i = 0; i < p.length; i++){

            p[i] = i; r[i] = 1;
        }
        
        for (int i = 0; i < d; i++){

            for (int j = 0; j < d; j++){

                if (i == 0 || j == 0 || i == rows || j == rows) {

                    int cells = i * d + j; union(0, cells);
                }
            }
        }

        for (int i = 0; i < rows; i++){

            char[] ch = grid[i].toCharArray();

            for (int j = 0; j < ch.length; j++){

                if (ch[j] == '\\'){

                    int cell1 = i* d + j, cell2 = (i + 1) * d + (j + 1); union(cell1, cell2);
                } 
                
                else if (ch[j] == '/'){

                    int cell1 = (i + 1) * d + j, cell2 = i * d + (j + 1); union(cell1, cell2);
                }
            }
        }

        return c;
    }

    public void union(int a, int b){

        int pa = find(a), pb = find(b);

        if (pa == pb) c++;
        
        else {

            if (r[pa] > r[pb]) p[pb] = pa;
            
            else if (r[pa] < r[pb]) p[pa] = pb;
            
            else {

                p[pb] = pa; r[pa]++;
            }
        }
    }

    public int find(int a){

        if (p[a] == a) return a;

        int t = find(p[a]);

        p[a] = t; return t;
    }
}
