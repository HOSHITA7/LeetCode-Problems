class Solution {

    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        
       int[][] a = new int[26][26];

        for (int i = 0; i < 26; i++) {

            Arrays.fill(a[i], Integer.MAX_VALUE); a[i][i] = 0;
        }

        for (int i = 0; i < cost.length; i++) a[original[i] - 'a'][changed[i] - 'a'] = Math.min(a[original[i] - 'a'][changed[i] - 'a'], cost[i]);

        for (int k = 0; k < 26; k++) {

            for (int i = 0; i < 26; i++) {

                if (a[i][k] < Integer.MAX_VALUE) {

                    for (int j = 0; j < 26; j++) {

                        if (a[k][j] < Integer.MAX_VALUE) a[i][j] = Math.min(a[i][j], a[i][k] + a[k][j]);
                    }
                }
            }
        }
        long s = 0L;

        for (int i = 0; i < source.length(); i++) {

            int o = source.charAt(i) - 'a', p = target.charAt(i) - 'a';

            if (a[o][p] == Integer.MAX_VALUE) return -1L;
            
             else  s += (long)a[o][p];
        }

        return s; 
    }
